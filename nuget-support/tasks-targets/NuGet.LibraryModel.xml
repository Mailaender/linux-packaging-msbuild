<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NuGet.LibraryModel</name>
    </assembly>
    <members>
        <member name="M:NuGet.LibraryModel.FrameworkDependencyFlagsUtils.GetFlags(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Convert set of flag strings into a FrameworkDependencyFlags.
            </summary>
            <param name="values">A list of values to generate the flags out of</param>
        </member>
        <member name="M:NuGet.LibraryModel.FrameworkDependencyFlagsUtils.GetFlagString(NuGet.LibraryModel.FrameworkDependencyFlags)">
            <summary>
            Convert framework dependency flags to a friendly string.
            </summary>
        </member>
        <member name="M:NuGet.LibraryModel.FrameworkDependencyFlagsUtils.GetFlags(System.String)">
            <summary>
            Convert set of flag strings into a LibraryIncludeFlags.
            If the <paramref name="flags" /> is null, it returns the default value of <see cref="F:NuGet.LibraryModel.FrameworkDependencyFlags.None" />
            </summary>
        </member>
        <member name="P:NuGet.LibraryModel.LibraryDependency.AutoReferenced">
            <summary>
            True if the PackageReference is added by the SDK and not the user.
            </summary>
        </member>
        <member name="M:NuGet.LibraryModel.LibraryDependency.HasFlag(NuGet.LibraryModel.LibraryDependencyTypeFlag)">
            <summary>
            Type property flag
            </summary>
        </member>
        <member name="P:NuGet.LibraryModel.LibraryDependencyInfo.Resolved">
            <summary>
            False if the package could not be found.
            </summary>
        </member>
        <member name="P:NuGet.LibraryModel.LibraryDependencyInfo.Library">
            <summary>
            Original library identity from the nuspec.
            This contains the original casing for the id/version.
            </summary>
        </member>
        <member name="P:NuGet.LibraryModel.LibraryDependencyInfo.Dependencies">
            <summary>
            Dependencies
            </summary>
        </member>
        <member name="P:NuGet.LibraryModel.LibraryDependencyInfo.Framework">
            <summary>
            Target framework used to select the dependencies.
            </summary>
        </member>
        <member name="M:NuGet.LibraryModel.LibraryDependencyInfo.CreateUnresolved(NuGet.LibraryModel.LibraryIdentity,NuGet.Frameworks.NuGetFramework)">
            <summary>
            Unresolved
            </summary>
        </member>
        <member name="M:NuGet.LibraryModel.LibraryDependencyInfo.Create(NuGet.LibraryModel.LibraryIdentity,NuGet.Frameworks.NuGetFramework,System.Collections.Generic.IEnumerable{NuGet.LibraryModel.LibraryDependency})">
            <summary>
            Resolved
            </summary>
        </member>
        <member name="F:NuGet.LibraryModel.LibraryDependencyTarget.PackageProjectExternal">
            <summary>
            A package, project, or external project
            </summary>
        </member>
        <member name="T:NuGet.LibraryModel.LibraryDependencyTargetUtils">
            <summary>
            Helper methods for dealing with LibraryDependencyTarget strings.
            </summary>
        </member>
        <member name="M:NuGet.LibraryModel.LibraryDependencyTargetUtils.Parse(System.String)">
            <summary>
            Convert flag string into a LibraryTypeFlag.
            </summary>
        </member>
        <member name="M:NuGet.LibraryModel.LibraryDependencyTargetUtils.GetFlagString(NuGet.LibraryModel.LibraryDependencyTarget)">
            <summary>
            Convert type flags to a friendly string.
            </summary>
        </member>
        <member name="T:NuGet.LibraryModel.LibraryIncludeFlagUtils">
            <summary>
            Helper methods for dealing with include/exclude flag strings.
            </summary>
        </member>
        <member name="F:NuGet.LibraryModel.LibraryIncludeFlagUtils.DefaultSuppressParent">
            <summary>
            By default build, contentFiles, and analyzers do not flow transitively between projects.
            </summary>
        </member>
        <member name="M:NuGet.LibraryModel.LibraryIncludeFlagUtils.GetFlags(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Convert set of flag strings into a LibraryIncludeFlags.
            </summary>
        </member>
        <member name="M:NuGet.LibraryModel.LibraryIncludeFlagUtils.GetFlagString(NuGet.LibraryModel.LibraryIncludeFlags)">
            <summary>
            Convert library flags to a friendly string.
            </summary>
        </member>
        <member name="M:NuGet.LibraryModel.LibraryIncludeFlagUtils.GetFlags(System.String,NuGet.LibraryModel.LibraryIncludeFlags)">
            <summary>
            Convert set of flag strings into a LibraryIncludeFlags.
            </summary>
        </member>
        <member name="M:NuGet.LibraryModel.LibraryRange.TypeConstraintAllows(NuGet.LibraryModel.LibraryDependencyTarget)">
            <summary>
            True if the type constraint allows the flag.
            </summary>
        </member>
        <member name="M:NuGet.LibraryModel.LibraryRange.TypeConstraintAllowsAnyOf(NuGet.LibraryModel.LibraryDependencyTarget)">
            <summary>
            True if any flags are allowed by the constraint.
            </summary>
        </member>
        <member name="F:NuGet.LibraryModel.LibraryType.Project">
            <summary>
            Indicates that the library comes from compiling an XRE-based Project
            </summary>
        </member>
        <member name="F:NuGet.LibraryModel.LibraryType.ExternalProject">
            <summary>
            Indicates that the library comes from compiling an external project (such as an MSBuild-based project)
            </summary>
        </member>
        <member name="F:NuGet.LibraryModel.LibraryType.Package">
            <summary>
            Indicates that the library comes from a NuGet Package
            </summary>
        </member>
        <member name="F:NuGet.LibraryModel.LibraryType.Assembly">
            <summary>
            Indicates that the library comes from a stand-alone .NET Assembly
            </summary>
        </member>
        <member name="F:NuGet.LibraryModel.LibraryType.Reference">
            <summary>
            Indicates that the library comes from a .NET Assembly in a globally-accessible
            location such as the GAC or the Framework Reference Assemblies
            </summary>
        </member>
        <member name="F:NuGet.LibraryModel.LibraryType.WinMD">
            <summary>
            Indicates that the library comes from a Windows Metadata Assembly (.winmd file)
            </summary>
        </member>
        <member name="F:NuGet.LibraryModel.LibraryType.Unresolved">
            <summary>
            Indicates that the library could not be resolved
            </summary>
        </member>
        <member name="M:NuGet.Shared.EqualityUtility.OrderedEquals``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Compares two enumberables for equality, ordered according to the specified key and optional comparer. Handles null values gracefully.
            </summary>
            <typeparam name="TSource">The type of the list</typeparam>
            <typeparam name="TKey">The type of the sorting key</typeparam>
            <param name="self">This list</param>
            <param name="other">The other list</param>
            <param name="keySelector">The function to extract the key from each item in the list</param>
            <param name="orderComparer">An optional comparer for comparing keys</param>
            <param name="sequenceComparer">An optional comparer for sequences</param>
        </member>
        <member name="M:NuGet.Shared.EqualityUtility.SequenceEqualWithNullCheck``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Compares two sequence for equality, allowing either sequence to be null. If one is null, both have to be
            null for equality.
            </summary>
        </member>
        <member name="M:NuGet.Shared.EqualityUtility.SetEqualsWithNullCheck``1(System.Collections.Generic.ISet{``0},System.Collections.Generic.ISet{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Compares two sets for equality, allowing either sequence to be null.
            If one is null, both have to be null for equality.
            </summary>
        </member>
        <member name="T:NuGet.Shared.HashCodeCombiner">
            <summary>
            Hash code creator, based on the original NuGet hash code combiner/ASP hash code combiner implementations
            </summary>
        </member>
        <member name="M:NuGet.Shared.HashCodeCombiner.GetHashCode``2(``0,``1)">
            <summary>
            Create a unique hash code for the given set of items
            </summary>
        </member>
        <member name="M:NuGet.Shared.HashCodeCombiner.GetHashCode``3(``0,``1,``2)">
            <summary>
            Create a unique hash code for the given set of items
            </summary>
        </member>
        <member name="M:NuGet.Shared.Extensions.AsList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Return the enumerable as a List of T, copying if required. Optimized for common case where it is an List of T.
            Avoid mutating the return value.
            </summary>
            <remarks>https://aspnetwebstack.codeplex.com/SourceControl/latest#src/Common/CollectionExtensions.cs</remarks>
        </member>
        <member name="M:NuGet.Shared.Extensions.AsHashSet``1(System.Collections.Generic.ISet{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Return the ISet as a HashSet of T, copying if required. Optimized for common case where it is a HashSet of T.
            Avoid mutating the return value.
            </summary>
        </member>
    </members>
<Signature xmlns="http://www.w3.org/2000/09/xmldsig#"><SignedInfo><CanonicalizationMethod Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315" /><SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1" /><Reference URI=""><Transforms><Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature" /><Transform Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315" /></Transforms><DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1" /><DigestValue>Puv2gwRrIWrX8rQnQi2QAOzXhdM=</DigestValue></Reference></SignedInfo><SignatureValue>tjjgZjcjfl2uric6qk0yc6s6kwduFZ70orIZ6Nl7mN1KbuAtcZaOfBLh8Rg/gtLDzr/FMlo8g4DDjAyGX/DtuymCoTfxBJbtrZkULzsIGe9XMnXu75qTuYqWk7gmeL21msZNaXjuKAqsUrc+oRVy/YN6W73Zi5yUgC6K95t/V4DCm4XOXhw54Yy9a76xlJQKQG0nImzvzazpFeS1cFxTvuOSKvzTtFC6/UQlu21Qu612sNNoI6N8dmFBhWOSNiVUPkb9MGP/EPHEyjvDK+J2LEfGuNmxxpsSjWdPHROi8zn6c8OTBbnb+JN5SwXJ+eXMwr77BksnjVDsD9wGLIOyxQ==</SignatureValue><KeyInfo><KeyValue><RSAKeyValue><Modulus>uscPDbgf6ehxz8GJNS8PU72SghXw/BBUFg7RBto9IU1Z4sPLCm2UsP77hVMPwtVgEC7ojc46piUC6UCYL3vqlKgO/Jjnb6wP7ntHTtOTYADjUMcgTV4IEws1bogcERHc8JNE9X7iof8O+PBgnpweIl/4pdUWlSkI8u3wBA7e6ELZWIyLPOWLapQ+1YhjPzHPqGo4ZkdZ5DzGue5apcyJUCM0cjVMDNuzo5c+KQv7OLUk/ZwI/4n5yAgaA0ELaeK7+3WZFkZwqyV0m7PL3xNWBWZR6zHv8uCrGGs8apaWuil7l6FVXWrE3fQwDfLiYxbBQ2qFnw1Fac4RgMBbpPKS5w==</Modulus><Exponent>AQAB</Exponent></RSAKeyValue></KeyValue><X509Data><X509Certificate>MIIE8zCCA9ugAwIBAgITMwAAAeN9ox+ChNzkoQACAAAB4zANBgkqhkiG9w0BAQUFADB5MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSMwIQYDVQQDExpNaWNyb3NvZnQgQ29kZSBTaWduaW5nIFBDQTAeFw0xOTA1MDIyMTIwMzJaFw0yMDA1MDIyMTIwMzJaMHQxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xHjAcBgNVBAMTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALrHDw24H+nocc/BiTUvD1O9koIV8PwQVBYO0QbaPSFNWeLDywptlLD++4VTD8LVYBAu6I3OOqYlAulAmC976pSoDvyY52+sD+57R07Tk2AA41DHIE1eCBMLNW6IHBER3PCTRPV+4qH/DvjwYJ6cHiJf+KXVFpUpCPLt8AQO3uhC2ViMizzli2qUPtWIYz8xz6hqOGZHWeQ8xrnuWqXMiVAjNHI1TAzbs6OXPikL+zi1JP2cCP+J+cgIGgNBC2niu/t1mRZGcKsldJuzy98TVgVmUesx7/LgqxhrPGqWlrope5ehVV1qxN30MA3y4mMWwUNqhZ8NRWnOEYDAW6TykucCAwEAAaOCAXcwggFzMBMGA1UdJQQMMAoGCCsGAQUFBwMDMB0GA1UdDgQWBBSsQpZ1w+qoy5yTwPRr/l8fbMbkMDBQBgNVHREESTBHpEUwQzEpMCcGA1UECxMgTWljcm9zb2Z0IE9wZXJhdGlvbnMgUHVlcnRvIFJpY28xFjAUBgNVBAUTDTIyOTgwMys0NTQxMDUwHwYDVR0jBBgwFoAU23C8UjSUneuXJ6bW1Ni9qm1HCE4wYgYDVR0fBFswWTBXoFWgU4ZRaHR0cDovL2NybC5taWNyb3NvZnQuY29tL3BraS9jcmwvcHJvZHVjdHMvTWljcm9zb2Z0JTIwQ29kZSUyMFNpZ25pbmclMjBQQ0EoMikuY3JsMGYGCCsGAQUFBwEBBFowWDBWBggrBgEFBQcwAoZKaHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3BraS9jZXJ0cy9NaWNyb3NvZnQlMjBDb2RlJTIwU2lnbmluZyUyMFBDQSgyKS5jcnQwDQYJKoZIhvcNAQEFBQADggEBADnobpnS8xmUVOzSwCWfjC++PEcumOy7xqaY869jaApHTOVNEuYJ4MEnuqY5/6eYbMOnuL8Q90leZuOj97ertHIxvRJyVN3M5Z9uhFXrbt8okoQK3NqTwiBPS06+1KPOW1I1biMUgpHAkzn9bpJLhjD+DlrfoUmQF6BphA2rxdaxo5UiFrT7LS/jguKUKbjPY4SofLnAyJtKCUK023ItQ/NA0P91Hit0jxnW6XpmFSBZp1BUUpwosaIWATQ/YsibdlTHigK3Ec+Mv6W5eSPd2q6MVCOJKu7oy/hwd8aqoe6zTZPe5NIWhyaHptNWjxr2u306lqEu5HcZJ5BwAIUdmnA=</X509Certificate><X509Certificate>MIIFvDCCA6SgAwIBAgIKYQQ1RQAAAAAAPzANBgkqhkiG9w0BAQUFADBfMRMwEQYKCZImiZPyLGQBGRYDY29tMRkwFwYKCZImiZPyLGQBGRYJbWljcm9zb2Z0MS0wKwYDVQQDEyRNaWNyb3NvZnQgUm9vdCBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkwHhcNMTgwOTIwMTc0MjAwWhcNMjEwNTA5MjMyODEzWjB5MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSMwIQYDVQQDExpNaWNyb3NvZnQgQ29kZSBTaWduaW5nIFBDQTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBANDTCMwSFqzT4NFGx9QeZsmnXQoRfh8U6j0WvMDnMYMb7NSF4Oy4670y/58I1cpBhPY3ne98VxKSyMrB6VoSYKoxDe6Ko2HvkiKSfFYWDjRikBZeWo4u3xtAKtA97WFE2I4Dpxw2EH9ZwmP04cDT7/F/94+FoV8rHIDCkFBfGYEGCdKQ6aC3LEQAQcZlUhc3LPnuut70BZ0slLWuY5BRscH9/jhefPXgrPb99O60KUDflHYqvRllr4xttieuwqf3sRUL5pVqgcan32aOaHd//V6tzcAJEA7wGVLJwXNRkyq2USOgSazyC9QErthQXt9PYz+1L4+sy00rcfRZKAUnTQUCAwEAAaOCAV4wggFaMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFNtwvFI0lJ3rlyem1tTYvaptRwhOMAsGA1UdDwQEAwIBhjASBgkrBgEEAYI3FQEEBQIDAgACMCMGCSsGAQQBgjcVAgQWBBQ8r5ui21VwyvdpQv+ZEBuZOIjiVzAZBgkrBgEEAYI3FAIEDB4KAFMAdQBiAEMAQTAfBgNVHSMEGDAWgBQOrIJgQFYnl+UlE/wq4QpTlVnkpDBQBgNVHR8ESTBHMEWgQ6BBhj9odHRwOi8vY3JsLm1pY3Jvc29mdC5jb20vcGtpL2NybC9wcm9kdWN0cy9taWNyb3NvZnRyb290Y2VydC5jcmwwVAYIKwYBBQUHAQEESDBGMEQGCCsGAQUFBzAChjhodHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20vcGtpL2NlcnRzL01pY3Jvc29mdFJvb3RDZXJ0LmNydDANBgkqhkiG9w0BAQUFAAOCAgEAPXvYLuA280KYVU8PG+SfB6j28gHmkjkKraifDsoEsP4iy4V5Q4rd4use9LM1g8uF5qQtPk2iCFGXJMoYuK7U+GOHipiJ6bDSCm0uVTXALHlhxrYeTZtWJokf4L9l/8gu5DxIZcXYRPTm7TQN3qkD9GO8nLy8ZKZVvaC3kc5lftYTjPIwpaznO9HtsnXWXc+Ah6Rx3EKRztKTsN5U5fV8Idzsi7zgfuy3KQlQrQYrOtcbPYyVV4HNOJiw35o40IHukye2Fcp5BTs06N3TIshlG/JMYTyVhi4yaMspmZL1dqrfhimgDA3jtLORTJJnWlTRWSfT7khCbjFMD+5Mop5oxyNKrlTjlJUDbKWcktsoD9oGWUQQl4Dw8qiFsz0V8CrxN4ntPTfFOKcqR5tnWbQt9XqzHned6EpJKnQ3q+KSL9wQ+EMttTLc+Y0VvUxJjKeuF8GzR+i+nvkxBmTF3tL+oqW0CHVJe2Ri/AOgfrnmkWdcQRcOR+RONi3oN7gba4AUFD9SoMCpliIlHRfxOVvtmkV6jsYZv8QU6+MQk+JkiM6LgMnAfbaLbVcTWyp7b2x+i0MQzw36XY1n1IvADPPaTnrv6u+v3700EvuJtKtnbptk9YsOTKozA4iCHAdRcFUUwVx9792nVd/Dx6OMHBtGehrz1n8WRNbrY9J9CLQidRc=</X509Certificate><X509Certificate>MIIFmTCCA4GgAwIBAgIQea0WoUqgpa1Mc1j0BxMuZTANBgkqhkiG9w0BAQUFADBfMRMwEQYKCZImiZPyLGQBGRYDY29tMRkwFwYKCZImiZPyLGQBGRYJbWljcm9zb2Z0MS0wKwYDVQQDEyRNaWNyb3NvZnQgUm9vdCBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkwHhcNMDEwNTA5MjMxOTIyWhcNMjEwNTA5MjMyODEzWjBfMRMwEQYKCZImiZPyLGQBGRYDY29tMRkwFwYKCZImiZPyLGQBGRYJbWljcm9zb2Z0MS0wKwYDVQQDEyRNaWNyb3NvZnQgUm9vdCBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQDzXfqAZ9Rap6kMLJAg0DUIPHWEzbcHiZyJ2t7Ow2D6kWhanpRxKRh2fMLgyCV2lA5Y+gQ0Nubfr/eAuulYCyuT5Z0F43cikfc0ZDwikR1e4QmQvBT+/HVYGeF5tweSo66IWQjYnwfKA1j8aCltMtfSqMtL/OELSDJP5uu4rU/kXG8TlJnbldV126gat5SRtHdb9UgMj2p5fRRwBH1tr5D12nDYR7e/my9s5wW34RFgrHmRFHzF1qbk4X7Vw37lktI8ALU2gt554W3ztW74nzPJy1J9c5g224uha6KVl5uj3sJNJv8GlmclBsjnrOTuEjOVMZnINQhONMp5U9W1vmMyWUA2wKVOBE0921sHM+RYv+8/U2TYQlk1V/0PRXwkBE2e1jh0EZcikM5oRHSSb9VLb7CG48c2QqDQ/MHAWvmjYbkwR3GWChawkcBCle8Qfyhq4yofseTNAz93cQTHIPxJDx1FiKTXy36IrY4t7EXbxFEEySr87IaemhGXW97OU4jm4rf9rJXCKEDb7wSQ34EzOdmyRaUjhwalVYkxuwYtYA5BGH0fLrWXyxHrFdUkpZTvFRSJ/Utz+jJb/NEzAPlZYnAHMuouq0Ate8rdIWcbMJmPFqojqEHRsG4RmzbE3kB0nOFYZcFgHnpbOMiPuwQmfNQWQOW2a2yqhv0Av87BNQIDAQABo1EwTzALBgNVHQ8EBAMCAcYwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUDqyCYEBWJ5flJRP8KuEKU5VZ5KQwEAYJKwYBBAGCNxUBBAMCAQAwDQYJKoZIhvcNAQEFBQADggIBAMURTQM6YN1dUhF3j7K7NsiyBb+0t6jYIJ1cEwO2HCL6BhM1tshj1JpHbyZX0lXxBLEmX9apUGigvNK4bszD6azfGc14rFl0rGY0NsQbPmw4TDMOMBINoyb+UVMA/69aToQNDx/kbQUuToVLjWwzb1TSZKu/UK99ejmgN+1jAw/8EwbOFjbUVDuVG1FiOuVNF9QFOZKaJ6hbqr3su77jIIlgcWxWs6UT0G0OI36VA+1oPfLYY7hrTbboMLXhypRL96KqXZkwsj2nwlFsKCABJCcrSwC3nRFrcL6yEIK8DJto0I07JIeqmShynTNfWZC99d6TnjpiWjQ54ohVHbkGsMGJay3XacMZEjaE0Mmg2v8vaXiy5Xra69cMwPe9Yxe4ORM4ojZbe/KFVmodZGLBOOKqv1FmopT1EpxmIhBr8rcwki3yKfA9OxRDaKLxnCk3y844ICVtfGfzfiQSJAMIgUfspZ6X9RjXz7vV73aW7/3O21adlaBC+ZdY4dcxItNfWeY+biIA6kOEtiXb2fMIVmjAZGsdfOy2k6JiV24u2OdYj8QxSSbd3ik1h/UwcXBbFDxpvYkSfesuo/7Yf56CWlIKK8FDK9kwiJ/IEPuJjeahhXUzfmye23MTZGJppS99ypZtn/gETTCSPW4hFCHJPeDD/YprnUr90aGdmUN3P7Da</X509Certificate></X509Data></KeyInfo><Object Id="ts-countersig"><X509Data><X509Certificate>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</X509Certificate><X509Certificate>MIIE3jCCA8agAwIBAgITMwAAAOtpqsw+KZ8tOQAAAAAA6zANBgkqhkiG9w0BAQUFADB3MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSEwHwYDVQQDExhNaWNyb3NvZnQgVGltZS1TdGFtcCBQQ0EwHhcNMTgwODIzMjAxOTMwWhcNMTkxMTIzMjAxOTMwWjCBzjELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEpMCcGA1UECxMgTWljcm9zb2Z0IE9wZXJhdGlvbnMgUHVlcnRvIFJpY28xJjAkBgNVBAsTHVRoYWxlcyBUU1MgRVNOOkI4RUMtMzBBNC03MTQ0MSUwIwYDVQQDExxNaWNyb3NvZnQgVGltZS1TdGFtcCBTZXJ2aWNlMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtUgVMTCRT4OJO0Mpuwvx+XO5QmP3h0rKAKfeLGh8EaWmLrpncRID7XmyosZLraSDHoz/hauMvlnCJFE+iMTvTDkSiioNZcAKBK7JDIq0vPzA559v2UunwBHaU+NueS6nYTBx54n6I4QpiE8/wr3dMz4e10eBAXd8h4OZ4ZK/YmJfSxJUGMSn70yzmSuKhQ7tIqUmmUSIt2Z3vu/zRhbKi8Aind4+ASRFpYMuE+1hD4jIpwJ1CUjZZhI0UsDRa7mz6CO2RwCUXPRjgXXvTfrv2zv+F8jDbTfEXs8RZPLw3eIFo06gqUfYhp1Ufw+/7Oesc5rM4OkRY1TG2jD/ne5PqQIDAQABo4IBCTCCAQUwHQYDVR0OBBYEFAW30KaPfAOZ1HwiXZI8utZ3J6amMB8GA1UdIwQYMBaAFCM0+NlSRnAK7UD7dvuzK7DDNbMPMFQGA1UdHwRNMEswSaBHoEWGQ2h0dHA6Ly9jcmwubWljcm9zb2Z0LmNvbS9wa2kvY3JsL3Byb2R1Y3RzL01pY3Jvc29mdFRpbWVTdGFtcFBDQS5jcmwwWAYIKwYBBQUHAQEETDBKMEgGCCsGAQUFBzAChjxodHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20vcGtpL2NlcnRzL01pY3Jvc29mdFRpbWVTdGFtcFBDQS5jcnQwEwYDVR0lBAwwCgYIKwYBBQUHAwgwDQYJKoZIhvcNAQEFBQADggEBAHvg1mBCSvjqwnWpRZF0s84/duMABrGAur2JSbcCMVeY1Gz9xftubwtIkxaUSqtyUkGOJVdgwlUMZAT4/up2bRT896uVKcEHNweSFLqPxfeJFgsUzQ+z9ftH4S9+IX+V7o0HB4VoB92Q9Qdd56HqRJFaLzbsppXJpSXbbdtrBjjfohYSrkzlcedWQ6sANjswlYbZ4cWxGDEB3ad8YTzLnPZtcwY4R4n49UOnUavG/NB0tJRUbMOO4fyUAMBr4R20tYudgvoXRK8BVVEfYP6mQa1QG6Mh3oluJb3jJ7pYpDfMMRXh3S9Y6pofu67todxbL7afn1Vi11d6/bjN6QMHSnY=</X509Certificate></X509Data><CounterSignature ts-format="cms-timestamp-message" xmlns="http://schemas.microsoft.com/xmldsig/timestamp/2003">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</CounterSignature></Object></Signature></doc>
